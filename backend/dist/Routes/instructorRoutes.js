"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const instructorInteractor_1 = require("../interactors/instructorInteractor");
const instructorRepository_1 = require("../repositories/instructorRepository");
const instructorController_1 = __importDefault(require("../controllers/instructorController"));
const instructorAuthMiddleware_1 = require("../middlewares/instructorAuthMiddleware");
const repository = new instructorRepository_1.instructorRepository();
const interactor = new instructorInteractor_1.instructorInteractor(repository);
const controller = new instructorController_1.default(interactor);
const router = express_1.default.Router();
router.post('/register', controller.onCreateInstructor.bind(controller));
router.post('/login', controller.onInstructorLogin.bind(controller));
router.post('/add', controller.onAddCourse.bind(controller));
router.get('/courses', instructorAuthMiddleware_1.InstructorProtect, controller.onGetCourses.bind(controller));
router.patch('/update-image', instructorAuthMiddleware_1.InstructorProtect, controller.onUpdateProfileImage.bind(controller));
router.post('/verify-irefresh-token', controller.onVerifyRefreshToken.bind(controller));
router.patch('/update-profile', instructorAuthMiddleware_1.InstructorProtect, controller.onProfileUpdate.bind(controller));
router.post('/send-otp', instructorAuthMiddleware_1.InstructorProtect, controller.onSendMail.bind(controller));
router.get('/enrolled-students', instructorAuthMiddleware_1.InstructorProtect, controller.onFetchEnrolledStudents.bind(controller));
router.get('/categories', instructorAuthMiddleware_1.InstructorProtect, controller.onFetchAllCategories.bind(controller));
router.patch('/edit-course', instructorAuthMiddleware_1.InstructorProtect, controller.onEditCourse.bind(controller));
router.get('/imessages/:id', instructorAuthMiddleware_1.InstructorProtect, controller.onFetchInstructorMessages.bind(controller));
router.patch('/add-qualification', instructorAuthMiddleware_1.InstructorProtect, controller.onAddQualification.bind(controller));
router.patch('/add-certification', instructorAuthMiddleware_1.InstructorProtect, controller.onAddCertification.bind(controller));
router.patch('/add-section', instructorAuthMiddleware_1.InstructorProtect, controller.onAddSection.bind(controller));
router.patch('/delete-section', instructorAuthMiddleware_1.InstructorProtect, controller.onDeleteSection.bind(controller));
router.get('dashboard-data', instructorAuthMiddleware_1.InstructorProtect, controller.onFetchDashboardData.bind(controller));
router.get('/graph-data', instructorAuthMiddleware_1.InstructorProtect, controller.onGraphData.bind(controller));
exports.default = router;
